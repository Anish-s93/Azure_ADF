{
	"name": "AssertDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AssertDS",
						"type": "DatasetReference"
					},
					"name": "EmpSource"
				},
				{
					"dataset": {
						"referenceName": "AssertDSdepartments",
						"type": "DatasetReference"
					},
					"name": "department"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          country as string,",
				"          Gender as string,",
				"          DOJ as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmpSource",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> department",
				"EmpSource, department assert(expectTrue(!isNull(toDate(DOJ, 'yyyyMMdd')), false, 'assertDOJ', null, 'Here we are checking doj'),",
				"     expectUnique(empid, false, 'assertEmpid', null, 'Checking for unique values'),",
				"     expectExists(department == depid, false, 'Assertexists')) ~> assert1",
				"assert1 derive(isInvalidDeparment = hasError('Assertexists')) ~> derivedColumn1"
			]
		}
	}
}